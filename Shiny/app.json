[{"name":"app.R","content":"library(shiny)\n\n# Define UI for dataset viewer app ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Reactivity\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Text for providing a caption ----\n      # Note: Changes made to the caption in the textInput control\n      # are updated in the output area immediately as you type\n      textInput(inputId = \"caption\",\n                label = \"Caption:\",\n                value = \"Data Summary\"),\n\n      # Input: Selector for choosing dataset ----\n      selectInput(inputId = \"dataset\",\n                  label = \"Choose a dataset:\",\n                  choices = c(\"rock\", \"pressure\", \"cars\")),\n\n      # Input: Numeric entry for number of obs to view ----\n      numericInput(inputId = \"obs\",\n                   label = \"Number of observations to view:\",\n                   value = 10)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Formatted text for caption ----\n      h3(textOutput(\"caption\", container = span)),\n\n      # Output: Verbatim text for data summary ----\n      verbatimTextOutput(\"summary\"),\n\n      # Output: HTML table with requested number of observations ----\n      tableOutput(\"view\")\n\n    )\n  )\n)\n\n# Define server logic to summarize and view selected dataset ----\nserver <- function(input, output) {\n\n  # Return the requested dataset ----\n  # By declaring datasetInput as a reactive expression we ensure\n  # that:\n  #\n  # 1. It is only called when the inputs it depends on changes\n  # 2. The computation and result are shared by all the callers,\n  #    i.e. it only executes a single time\n  datasetInput <- reactive({\n    switch(input$dataset,\n           \"rock\" = rock,\n           \"pressure\" = pressure,\n           \"cars\" = cars)\n  })\n\n  # Create caption ----\n  # The output$caption is computed based on a reactive expression\n  # that returns input$caption. When the user changes the\n  # \"caption\" field:\n  #\n  # 1. This function is automatically called to recompute the output\n  # 2. New caption is pushed back to the browser for re-display\n  #\n  # Note that because the data-oriented reactive expressions\n  # below don't depend on input$caption, those expressions are\n  # NOT called when input$caption changes\n  output$caption <- renderText({\n    input$caption\n  })\n\n  # Generate a summary of the dataset ----\n  # The output$summary depends on the datasetInput reactive\n  # expression, so will be re-executed whenever datasetInput is\n  # invalidated, i.e. whenever the input$dataset changes\n  output$summary <- renderPrint({\n    dataset <- datasetInput()\n    summary(dataset)\n  })\n\n  # Show the first \"n\" observations ----\n  # The output$view depends on both the databaseInput reactive\n  # expression and input$obs, so it will be re-executed whenever\n  # input$dataset or input$obs is changed\n  output$view <- renderTable({\n    head(datasetInput(), n = input$obs)\n  })\n\n}\n\n# Create Shiny app ----\nshinyApp(ui, server)\n","type":"text"},{"name":"DESCRIPTION","content":"Title: Reactivity\nAuthor: RStudio, Inc.\nAuthorUrl: http://www.rstudio.com/\nLicense: MIT\nDisplayMode: Showcase\nTags: getting-started\nType: Shiny\n","type":"text"},{"name":"Readme.md","content":"This example demonstrates a core feature of Shiny: **reactivity**. In the `server` function, a reactive called `datasetInput` is declared. \n\nNotice that the reactive expression depends on the input expression `input$dataset`, and that it's used by two output expressions: `output$summary` and `output$view`. Try changing the dataset (using *Choose a dataset*) while looking at the reactive and then at the outputs; you will see first the reactive and then its dependencies flash. \n\nNotice also that the reactive expression doesn't just update whenever anything changes--only the inputs it depends on will trigger an update. Change the \"Caption\" field and notice how only the `output$caption` expression is re-evaluated; the reactive and its dependents are left alone.\n","type":"text"}]
